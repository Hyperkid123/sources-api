# Do not update - this file is auto-generated by rake openapi:generate[graphql]

require "graphql"
require "graphql/batch"
require "graphql/preload"

require "manageiq/api/common/graphql/types/big_int"
require "manageiq/api/common/graphql/types/date_time"
require "manageiq/api/common/graphql/types/query_filter"

module Api
  module GraphQL
    ApplicationTypeType = ::GraphQL::ObjectType.define do
      name "ApplicationType"
      description "A ApplicationType"

      field :created_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :display_name, types.String
      field :id, !types.ID, "ID of the resource"
      field :name, types.String
      field :updated_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
    end

    ApplicationType = ::GraphQL::ObjectType.define do
      name "Application"
      description "A Application"

      implements ::GraphQL::Relay::Node.interface

      field :application_type_id, types.String, "ID of the resource"
      field :created_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :id, !types.ID, "ID of the resource"
      field :source_id, types.String, "ID of the resource"
      field :updated_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
    end

    AuthenticationType = ::GraphQL::ObjectType.define do
      name "Authentication"
      description "A Authentication"

      implements ::GraphQL::Relay::Node.interface

      field :authtype, types.String
      field :id, !types.ID, "ID of the resource"
      field :name, types.String
      field :password, types.String
      field :resource_id, types.String, "ID of the resource"
      field :resource_type, types.String
      field :status, types.String
      field :status_details, types.String
      field :tenant, types.String
      field :username, types.String
    end

    EndpointType = ::GraphQL::ObjectType.define do
      name "Endpoint"
      description "A Endpoint"

      implements ::GraphQL::Relay::Node.interface

      field :certificate_authority, types.String, "Optional X.509 Certificate Authority"
      field :created_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :default, types.Boolean
      field :host, types.String, "URI host component"
      field :id, !types.ID, "ID of the resource"
      field :path, types.String, "URI path component"
      field :port, ::ManageIQ::API::Common::GraphQL::Types::BigInt, "URI port component"
      field :role, types.String
      field :scheme, types.String, "URI scheme component"
      field :source_id, types.String, "ID of the resource"
      field :tenant, types.String
      field :updated_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :verify_ssl, types.Boolean, "Should SSL be verified"
      connection :authentications, AuthenticationType.connection_type, "The authentications associated with this EndpointType" do
        preload :authentications
      end
    end

    SourceTypeType = ::GraphQL::ObjectType.define do
      name "SourceType"
      description "A SourceType"

      field :created_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :id, !types.ID, "ID of the resource"
      field :name, types.String
      field :product_name, types.String
      field :schema, types.String
      field :updated_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :vendor, types.String
      connection :sources, SourceType.connection_type, "The sources associated with this SourceTypeType" do
        preload :sources
      end
    end

    SourceType = ::GraphQL::ObjectType.define do
      name "Source"
      description "A Source"

      implements ::GraphQL::Relay::Node.interface

      field :created_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :id, !types.ID, "ID of the resource"
      field :name, types.String
      field :source_type_id, types.String, "ID of the resource"
      field :tenant, types.String
      field :uid, types.String
      field :updated_at, ::ManageIQ::API::Common::GraphQL::Types::DateTime
      field :version, types.String
      connection :applications, ApplicationType.connection_type, "The applications associated with this SourceType" do
        preload :applications
      end
      connection :endpoints, EndpointType.connection_type, "The endpoints associated with this SourceType" do
        preload :endpoints
      end
    end

    QueryType = ::GraphQL::ObjectType.define do
      name "Query"
      description "The query root of this schema"

      [
        :application_types, :applications, :authentications, :endpoints, :source_types, :sources
      ].each do |collection|

        klass_names   = collection.to_s.camelize
        klass_name    = klass_names.singularize
        model_class   = klass_name.constantize
        resource_type = "Api::GraphQL::#{klass_name}Type".constantize

        field collection.to_s.singularize.to_sym do
          type resource_type
          argument :id, !types.ID
          description model_class.name
          resolve lambda { |_obj, args, _ctx|
            model_class.where(:id => args[:id]).first
          }
        end

        connection collection, !resource_type.connection_type, "List available #{klass_names}" do
          argument :id, types.ID
          argument :filter, ::ManageIQ::API::Common::GraphQL::Types::QueryFilter, "The Query Filter"

          resolve lambda { |_obj, args, _ctx|
            scope = if args[:filter]
                      ::ManageIQ::API::Common::Filter.new(model_class,
                                                          ActionController::Parameters.new(args[:filter]),
                                                          ::Api::Docs["1.0"].definitions[klass_name]).apply
                    else
                      model_class
                    end
            args[:id] ? scope.where(:id => args[:id]) : scope.all
          }
        end
      end
    end

    Schema = ::GraphQL::Schema.define do
      use ::GraphQL::Batch
      enable_preloading

      query QueryType
    end
  end
end
